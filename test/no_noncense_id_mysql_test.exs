defmodule NoNoncenseIDMysqlTest do
  use TestNoNoncenseID.DataCase, async: true

  alias MyApp.{MysqlRepo, Schema}
  import Ecto.Query

  @range Integer.pow(2, 64)
  @signed_min -Integer.pow(2, 63)
  @signed_max Integer.pow(2, 63) - 1
  @unsigned_max @range - 1

  defp get_raw() do
    from(r in "test_table",
      select: [:autogenerated, :bin_id, :bigint_id, :string_id, :unsigned_id]
    )
  end

  defp get_raw(field, value), do: get_raw() |> by_field(field, value)

  defp get(field, value) do
    from(r in Schema, select_merge: %{unsigned_id: r.unsigned_id}) |> by_field(field, value)
  end

  defp by_field(query, field, value), do: where(query, [a], field(a, ^field) == ^value)

  describe "autogenerated" do
    test "can be autogenerated" do
      assert {:ok, inserted} = Schema.changeset(%{}) |> MysqlRepo.insert()
      assert <<_::88>> = inserted.autogenerated
      res = get_raw() |> MysqlRepo.one()
      assert is_integer(res.autogenerated)
    end
  end

  describe "bigint type" do
    test "correctly returns input" do
      for {input, expected, expected_raw} <- [
            {0, "AAAAAAAAAAA", 0},
            {@signed_min, "gAAAAAAAAAA", @signed_min},
            {@signed_max, "f_________8", @signed_max},
            {@unsigned_max, "__________8", -1}
          ] do
        assert {:ok, inserted} = Schema.changeset(%{bigint_id: input}) |> MysqlRepo.insert()
        assert expected == inserted.bigint_id
        assert %{} = get_raw(:bigint_id, expected_raw) |> MysqlRepo.one()
        assert %{bigint_id: ^expected} = get(:bigint_id, input) |> MysqlRepo.one()
      end
    end
  end

  describe "bin type" do
    test "correctly returns input" do
      for {input, expected, expected_raw} <- [
            {0, "AAAAAAAAAAA", <<0, 0, 0, 0, 0, 0, 0, 0>>},
            {@signed_min, "gAAAAAAAAAA", <<128, 0, 0, 0, 0, 0, 0, 0>>},
            {@signed_max, "f_________8", <<127, 255, 255, 255, 255, 255, 255, 255>>},
            {@unsigned_max, "__________8", <<255, 255, 255, 255, 255, 255, 255, 255>>}
          ] do
        assert {:ok, inserted} = Schema.changeset(%{bin_id: input}) |> MysqlRepo.insert()
        assert expected == inserted.bin_id
        assert %{} = get_raw(:bin_id, expected_raw) |> MysqlRepo.one()
        assert %{bin_id: ^expected} = get(:bin_id, input) |> MysqlRepo.one()
      end
    end
  end

  describe "string type" do
    test "correctly returns input" do
      for {input, expected, expected_raw} <- [
            {0, "AAAAAAAAAAA", "AAAAAAAAAAA"},
            {@signed_min, "gAAAAAAAAAA", "gAAAAAAAAAA"},
            {@signed_max, "f_________8", "f_________8"},
            {@unsigned_max, "__________8", "__________8"}
          ] do
        assert {:ok, inserted} = Schema.changeset(%{string_id: input}) |> MysqlRepo.insert()
        assert expected == inserted.string_id
        assert %{} = get_raw(:string_id, expected_raw) |> MysqlRepo.one()
        assert %{string_id: ^expected} = get(:string_id, input) |> MysqlRepo.one()
      end
    end
  end

  describe "unsigned bigint type" do
    test "correctly returns input" do
      for {input, expected, expected_raw} <- [
            {0, "AAAAAAAAAAA", 0},
            {@signed_min, "gAAAAAAAAAA", @signed_max + 1},
            {@signed_max, "f_________8", @signed_max},
            {@unsigned_max, "__________8", @unsigned_max}
          ] do
        assert {:ok, inserted} = Schema.changeset(%{unsigned_id: input}) |> MysqlRepo.insert()
        assert expected == inserted.unsigned_id
        assert %{} = get_raw(:unsigned_id, expected_raw) |> MysqlRepo.one()
        assert %{unsigned_id: ^expected} = get(:unsigned_id, input) |> MysqlRepo.one()
      end
    end
  end
end
